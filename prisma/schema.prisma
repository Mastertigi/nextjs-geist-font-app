// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management and authentication
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectsManaged Project[] @relation("ProjectManager")
  worksAssigned   Work[]    @relation("WorkAssignee")
  documents       Document[]
  trainings       Training[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

// Multi-tenant company structure
model Company {
  id          Int      @id @default(autoincrement())
  name        String
  cnpj        String?  @unique
  address     String?
  phone       String?
  email       String?
  sector      String   @default("CONSTRUCTION") // CONSTRUCTION, FLORICULTURE, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  projects    Project[]
  inventory   InventoryItem[]
  machinery   Machinery[]
  employees   Employee[]
  documents   Document[]
  trainings   Training[]

  @@map("companies")
}

// Project management
model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(PLANNING)
  budget      Float?
  actualCost  Float?
  managerId   Int
  companyId   Int
  
  // Relations
  manager     User          @relation("ProjectManager", fields: [managerId], references: [id])
  company     Company       @relation(fields: [companyId], references: [id])
  works       Work[]
  documents   Document[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Work/Construction site management
model Work {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  location      String?
  status        WorkStatus @default(NOT_STARTED)
  plannedCost   Float?
  actualCost    Float?
  startDate     DateTime?
  endDate       DateTime?
  progress      Float      @default(0) // Percentage 0-100
  projectId     Int
  assigneeId    Int?
  
  // Relations
  project       Project    @relation(fields: [projectId], references: [id])
  assignee      User?      @relation("WorkAssignee", fields: [assigneeId], references: [id])
  qualityChecks QualityCheck[]
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("works")
}

enum WorkStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Inventory and materials management
model InventoryItem {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  category    String
  unit        String             // kg, mÂ², units, etc.
  minStock    Float              @default(0)
  maxStock    Float?
  currentStock Float             @default(0)
  unitPrice   Float?
  companyId   Int
  
  // Relations
  company     Company            @relation(fields: [companyId], references: [id])
  movements   InventoryMovement[]
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("inventory_items")
}

model InventoryMovement {
  id          Int               @id @default(autoincrement())
  type        MovementType
  quantity    Float
  unitPrice   Float?
  totalValue  Float?
  description String?
  itemId      Int
  
  // Relations
  item        InventoryItem     @relation(fields: [itemId], references: [id])
  
  createdAt   DateTime          @default(now())

  @@map("inventory_movements")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

// Machinery and equipment management
model Machinery {
  id              Int                    @id @default(autoincrement())
  name            String
  model           String?
  serialNumber    String?
  purchaseDate    DateTime?
  purchaseValue   Float?
  status          MachineryStatus        @default(AVAILABLE)
  location        String?
  companyId       Int
  
  // Relations
  company         Company                @relation(fields: [companyId], references: [id])
  maintenances    MachineryMaintenance[]
  
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@map("machinery")
}

enum MachineryStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_ORDER
}

model MachineryMaintenance {
  id            Int             @id @default(autoincrement())
  type          MaintenanceType
  description   String
  scheduledDate DateTime
  completedDate DateTime?
  cost          Float?
  machineryId   Int
  
  // Relations
  machinery     Machinery       @relation(fields: [machineryId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("machinery_maintenances")
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
}

// Employee management
model Employee {
  id          Int      @id @default(autoincrement())
  name        String
  cpf         String   @unique
  position    String
  department  String?
  hireDate    DateTime
  salary      Float?
  isActive    Boolean  @default(true)
  companyId   Int
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  timeRecords TimeRecord[]
  trainings   Training[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("employees")
}

// Time tracking
model TimeRecord {
  id         Int      @id @default(autoincrement())
  clockIn    DateTime
  clockOut   DateTime?
  totalHours Float?
  employeeId Int
  
  // Relations
  employee   Employee @relation(fields: [employeeId], references: [id])
  
  createdAt  DateTime @default(now())

  @@map("time_records")
}

// Training management
model Training {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isCompleted Boolean  @default(false)
  certificate String?  // URL to certificate file
  userId      Int?
  employeeId  Int?
  companyId   Int
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  employee    Employee? @relation(fields: [employeeId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trainings")
}

// Document management
model Document {
  id          Int          @id @default(autoincrement())
  name        String
  type        DocumentType
  filePath    String
  fileSize    Int?
  mimeType    String?
  version     Int          @default(1)
  isActive    Boolean      @default(true)
  projectId   Int?
  userId      Int
  companyId   Int
  
  // Relations
  project     Project?     @relation(fields: [projectId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  company     Company      @relation(fields: [companyId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("documents")
}

enum DocumentType {
  CONTRACT
  LICENSE
  PERMIT
  TECHNICAL_DRAWING
  REPORT
  INVOICE
  OTHER
}

// Quality control
model QualityCheck {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  checkDate   DateTime
  status      QualityStatus
  notes       String?
  workId      Int
  
  // Relations
  work        Work          @relation(fields: [workId], references: [id])
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("quality_checks")
}

enum QualityStatus {
  PASSED
  FAILED
  PENDING
  REQUIRES_ATTENTION
}
